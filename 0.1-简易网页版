!DOCTYPE html>
<html lang="zh-CN">
  <head> 
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="theme-color" content="#f8f8f8" />
    <title>0.1-简易网页版</title>

    <style>
      body {
        background-color: #f8f8f8;
      }
      .main {
        position: absolute;
        left: 50%; 
        top: 50%; 
        -webkit-transform: translate(-50%, -50%);  
        transform: translate(-50%, -50%); 
        display: flex;
        align-items: center;  
        flex-direction: column;  
      }
      .unsupported {
        display: none;
      }
    </style>
  </head>

  <body>
    <div class="main supported"> 
      <noscript>需要启动 JavaScript。</noscript>
      <button id="main-button" onclick="handleButtonClick()" style="margin: 0%">启动</button>
      <p id="device-name" style="margin-top: 10px; margin-bottom: 10px">未启动</p>
      <p id="status" style="margin: 0"></p>
    </div>
    <footer>
      <dialog id="dialog">
        <header>启动失败</header>
        <form method="dialog">
          <p id="dialog-content"></p>
          <pre id="dialog-debug-container"><code id="dialog-debug-content"></code></pre>
          <menu style="display: flex; justify-content: flex-end">
            <button onclick="location.reload()">OK</button>
          </menu>
        </form>
      </dialog>
    </footer>
  </body>

  <script>
    // send this first, then wait for B0, B1, or AE
    // B0 and B1 contain the status of the previous session, AE is a key authentication request
    // AE will only show up in new firmwares
    // prettier-ignore
    const startPrologue = new Uint8Array([
      0xFE, 0xFE, 0x09, 0xB0,
      0x01, 0x01, 0x00, 0x00
    ]);

    // when ending the session, send this then wait for B3
    // B3 contains the status of this session
    // prettier-ignore
    const endPrologue = new Uint8Array([
      0xFE, 0xFE, 0x09, 0xB3,
      0x00, 0x00
    ]);

    // after receiving B3, send this then disconnect
    // prettier-ignore
    const endEpilogue = new Uint8Array([
      0xFE, 0xFE, 0x09, 0xB4,
      0x00, 0x00
    ]);

    // send this before startEpilogueOfflinebomb and before endEpilogue, or if BC is received
    // used to clear the previous unfinished offline (BB) session
    // receiving BC is a strong signal that sending this is necessary,
    // but if Offlinebomb will be used it will be safer to send this before any other command
    // prettier-ignore
    const offlinebombFix = new Uint8Array([
      0xFE, 0xFE, 0x09, 0xBC,
      0x00, 0x00
    ]);

    // send this if BA is received
    // BA is related to user info uploading, but we will never actually upload anything
    // prettier-ignore
    const baAck = new Uint8Array([
      0xFE, 0xFE, 0x09, 0xBA,
      0x00, 0x00
    ]);

    // CRC-16/ChangGong
    // width=16 poly=0x8005 init=0xe808 refin=true refout=true xorout=0x0000
    function crc16changgong(str) {
      let crc = 0x1017;
      for (let i = 0; i < str.length; i++) {
        crc ^= str.charCodeAt(i);
        for (let j = 0; j < 8; j++) {
          if ((crc & 0x0001) == 1) {
            crc >>= 1;
            crc ^= 0xa001;
          } else crc >>= 1;
        }
      }
      return crc;
    }

    // CRC-16/CGAEAF (abbrev for ChangGong AE/AF)
    // width=16 poly=0x8005 init=0xf856 refin=true refout=true xorout=0x0075
    // truncated to lower 8 bits
    function crc16cgaeaf(array) {
      let crc = 0x6a1f;
      for (let i = 0; i < array.length; i++) {
        crc ^= array[i];
        for (let j = 0; j < 8; j++) {
          if ((crc & 0x0001) == 1) {
            crc >>= 1;
            crc ^= 0xa001;
          } else crc >>= 1;
        }
      }
      crc = (crc ^ 0x75) & 0xff;
      return crc;
    }

    function decAsHex(n) {
      // explanation: 42 => 0x42
      return parseInt(n.toString(), 16);
    }

    function makeRandomUserId() {
      // explanation: XYZW (decimal) => [0xXY, 0xZW]
      const randomIdNumber = Math.floor(Math.random() * 9999) + 1;
      return new Uint8Array([randomIdNumber >> 8, randomIdNumber & 0xff]).map(decAsHex);
    }

    function makeDatetimeArray() {
      // explanation: 2013/1/11 12:34:56 => [0x13, 0x01, 0x11, 0x12, 0x34, 0x56]
      const now = new Date().toLocaleString("zh-CN", { timeZone: "Asia/Shanghai" });
      const date = now
        .split(" ")[0]
        .split("/")
        .map((x) => parseInt(x));
      const time = now
        .split(" ")[1]
        .split(":")
        .map((x) => parseInt(x));
      const datetimeArrayDecimal = [date[0] % 100, ...date.slice(1), ...time];
      return datetimeArrayDecimal.map(decAsHex);
    }

    // Offlinebomb exploit

    async function makeUnlockKey(array) {
      const response = await fetch("example.com")
        .then((response) => response.blob())
        .then((blob) => blob.stream().pipeThrough(new DecompressionStream("gzip")))
        .then((stream) => new Response(stream).blob())
        .then((blob) => blob.text())
        .then(JSON.parse);
      let key = [array[1]][0][array[3]] << 16;
      key |= [array[1]][1][array[2]];
      return new Uint8Array([(key >> 24) & 0xff, (key >> 16) & 0xff, (key >> 8) & 0xff, key & 0xff]);
    }

    async function makeUnlockResponse(unlockRequestBuffer, deviceName) {
      const unlockRequest = new Uint8Array(unlockRequestBuffer);
      const unknownByte = unlockRequest[5]; // unknown, but we only need to echo it back
      const nonceBytes = unlockRequest.slice(6, 8); // not nonce in crypto sense, it's an auto-incrementing number and used for key calculation
      const mac = unlockRequest.slice(8, 10); // last 2 bytes of the MAC address

      // [0x00, 0x01] => 0x0001 => (add 1) => 0x0002 => [0x00, 0x02]
      const nonce = (nonceBytes[0] << 8) | nonceBytes[1];
      const newNonce = nonce + 1;
      const newNonceBytes = nonce === 0xffff ? new Uint8Array([0x01, 0x00]) : new Uint8Array([(newNonce >> 8) & 0xff, newNonce & 0xff]); // bug-for-bug compatible

      const rawKey = await makeUnlockKey(new Uint8Array([...nonceBytes, ...mac])); // 2 bytes of nonce, 2 bytes of MAC

      const mask = deviceName
        .slice(-4)
        .split("")
        .map((x) => x.charCodeAt(0) - 0x30);
      const key = rawKey.map((x, i) => x ^ mask[i]);

      // prettier-ignore
      const checksumInput = new Uint8Array([
        unknownByte,
        ...newNonceBytes, // 2 bytes of nonce
        ...key, // 4 bytes of key
        0xFE, 0x87, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00
      ]);

      const checksum = crc16cgaeaf(checksumInput);

      // prettier-ignore
      const finalPayload = new Uint8Array([
        0xFE, 0xFE, 0x09, 0xAF,
        checksum, ...checksumInput // 1 byte of checksum, 15 bytes of the rest
      ]);
      return finalPayload;
    }

    function makeStartEpilogue(deviceName, isKeyAuthPresent = false) {
      // the one true command to begin a session
      const checksum = crc16changgong(deviceName.slice(-5));
      const mn = isKeyAuthPresent ? 0x0b : 0xff; // magic number
      const ri = makeRandomUserId();
      const dt = makeDatetimeArray();
      // prettier-ignore
      return new Uint8Array([
        0xFE, 0xFE, 0x09, 0xB2,
        0x01, checksum & 0xFF, checksum >> 8, mn,
        0x00, ...ri, ...dt, // 2 bytes of random user id, 6 bytes of datetime
        0x0F, 0x27, 0x00
      ]);
    }

    // BLUETOOTH
    let bluetoothDevice;
    let txdCharacteristic;
    let rxdCharacteristic;
    let isStarted = false;
    let pendingStartEpilogue; // workaround for determining new firmware, see handleRxdNotifications
    let pendingTimeoutMessage; // if we don't get a response in time, we should show an error message
    const logs = [];

    function bufferToHexString(array) {
      return Array.from(new Uint8Array(array))
        .map((x) => x.toString(16).padStart(2, "0"))
        .join("")
        .toUpperCase();
    }

    // .writeValue logging
    if (typeof BluetoothRemoteGATTCharacteristic !== "undefined") {
      const originalWriteValue = BluetoothRemoteGATTCharacteristic.prototype.writeValue;
      BluetoothRemoteGATTCharacteristic.prototype.writeValue = new Proxy(originalWriteValue, {
        apply: (target, thisArg, argArray) => {
          const log = "TXD: " + bufferToHexString(argArray[0]);
          console.log(log);
          logs.push(log);
          return Reflect.apply(target, thisArg, argArray);
        },
      });
    }

    function updateUi(stage) {
      const mainButton = document.getElementById("main-button");
      const deviceName = document.getElementById("device-name");
      const status = document.getElementById("status");

      switch (stage) {
        case "pending":
          mainButton.innerText = "正在启动";
          mainButton.disabled = true;
          deviceName.innerText = "已连接：" + bluetoothDevice.name;
          break;

        case "standby":
          mainButton.innerText = "启动";
          mainButton.disabled = false;
          deviceName.innerText = "未启动";
          break;

        case "ok":
          mainButton.innerText = "结束";
          mainButton.disabled = false;
          break;

      }
    }

    async function disconnect() {
      if (bluetoothDevice) await bluetoothDevice.gatt.disconnect();
      isStarted = false;
      logs.length = 0;
      clearTimeout(pendingStartEpilogue);
      clearTimeout(pendingTimeoutMessage);
      updateUi("standby");
    }

    async function handleBluetoothError(error) {
      // this is so fucking ugly but i have no choice
      // you would never know how those shitty browsers behave
      const e = error.toString();
      let isFatalError = false;
      let showLogs = false;

      if (e.match(/User cancelled/) || e == "2") {
        // "2" is a weird behavior of Bluefy browser on iOS
        return;
      }

      dialogDebugContainer.style.display = "none";
      if (logs.length != 0 && showLogs) {
        dialogDebugContainer.style.display = "block";
        dialogDebugContent.innerText = "调试信息：\n" + logs.join("\n");
      }

      document.getElementById("dialog").showModal();

      if (isFatalError) disconnect();

      throw error;
    }

    async function handleRxdNotifications(event) {
      const value = event.target.value;
      const dType = value.getUint8(3);

      const log = "RXD: " + bufferToHexString(value.buffer);
      console.log(log);
      logs.push(log);

      try {
        // prettier-ignore
        switch (dType) {
          case 0xB0: // start prologue ok; delay 500ms for key authentication request (AE) if this is a new firmware
          case 0xB1:
            clearTimeout(pendingStartEpilogue);
            pendingStartEpilogue = setTimeout(() => {
              txdCharacteristic.writeValue(makeStartEpilogue(bluetoothDevice.name));
            }, 500);
            break;
          case 0xAE: // receiving an unlock request (AE), this is a new firmware
            clearTimeout(pendingStartEpilogue);
            await txdCharacteristic.writeValue(await makeUnlockResponse(value.buffer, bluetoothDevice.name));
            break;
          case 0xAF:
            switch (value.getUint8(5)) {
              case 0x55: // key authentication ok; continue to send start epilogue (B2)
                await txdCharacteristic.writeValue(makeStartEpilogue(bluetoothDevice.name, true));
                break;
              case 0x01: // key authentication failed
              case 0x04:
                throw new Error("WATERCTL INTERNAL Bad key");
                break;
              default:
                await txdCharacteristic.writeValue(makeStartEpilogue(bluetoothDevice.name, true));
                throw new Error("WATERCTL INTERNAL Unknown RXD data");
                break;
            }
            break;
          case 0xB2: // start ok; update ui
            clearTimeout(pendingStartEpilogue);
            clearTimeout(pendingTimeoutMessage);
            isStarted = true;
            updateUi("ok");
            break;
          case 0xB3: // end prologue ok (B3); disconnect
            await txdCharacteristic.writeValue(endEpilogue);
            disconnect();
            break;
          case 0xAA: // telemetry, no need to respond
          case 0xB5: // temperature settings related, no need to respond
          case 0xB8: // unknown, no need to respond
            break;
          case 0xBA: // user info upload request; send BA ack to tell it we have done that (won't actually do it)
            await txdCharacteristic.writeValue(baAck);
            break;
          case 0xBC: // see offlinebombFix
            await txdCharacteristic.writeValue(offlinebombFix);
            break;
          case 0xC8: // start epilogue (B2) is refused
            throw new Error("WATERCTL INTERNAL Refused");
            break;
        }
      } catch (error) {
        handleBluetoothError(error);
      }
    }

    function setupTimeoutMessage() {
      if (!pendingTimeoutMessage) {
        pendingTimeoutMessage = setTimeout(() => {
          handleBluetoothError("WATERCTL INTERNAL Operation timed out");
        }, 15000);
      }
    }

    async function start() {
      try {
        bluetoothDevice = await navigator.bluetooth.requestDevice({
          filters: Array.from("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ")
            .map((c) => ({ namePrefix: c }))
            .concat({ name: "" }),
          optionalServices: [window.navigator.userAgent.match(/Bluefy/) ? "generic_access" : 0xf1f0], // workaround for Bluefy
        });
        updateUi("pending");

        const server = await bluetoothDevice.gatt.connect();
        const service = await server.getPrimaryService(0xf1f0);
        txdCharacteristic = await service.getCharacteristic(0xf1f1);
        rxdCharacteristic = await service.getCharacteristic(0xf1f2);

        await rxdCharacteristic.startNotifications();
        rxdCharacteristic.addEventListener("characteristicvaluechanged", handleRxdNotifications);

        await txdCharacteristic.writeValue(startPrologue);
        setupTimeoutMessage();
      } catch (error) {
        handleBluetoothError(error);
      }
    }

    async function end() {
      try {
        await txdCharacteristic.writeValue(endPrologue);
        setupTimeoutMessage();
      } catch (error) {
        handleBluetoothError(error);
      }
    }

    function handleButtonClick() {
      isStarted ? end() : start();
    }

    // auto resize for desktop
    window.resizeTo(538, 334);
  </script>
</html>
